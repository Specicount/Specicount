<?xml version="1.0" encoding="UTF-8"?>
<root>
    <default>
        <includes>
            <!--
                Path to css and js files into plugins folder.
                If your files are not in plugins folder, use absolute paths.
            -->
            <css>
                <file>formvalidation/dist/css/formValidation.min.css</file>
            </css>
            <js>
                <file>formvalidation/dist/js/formValidation.min.js</file>
                <file>formvalidation/dist/js/framework/bootstrap.min.js</file>
            </js>
        </includes>
        <js_code>
<![CDATA[

    if($("%selector%").hasClass('material-form')) {

        // Real time validation - Material Form
        $("%selector%").formValidation({
            framework: 'bootstrap',
            row: {
                selector: '.input-field',
                valid: 'has-success',
                invalid: 'has-error'
            },
            excluded: ['.hidden-wrapper:not(.on) *'],
            onPreValidate: function(e) {

               // console.log('PreValidate');
            },
            onError: function(e) {

                // if accordion, collapse in first one with error
                if($('.panel-collapse')[0] && $('.row.has-error')[0]) {
                    $('.panel-collapse').removeClass('in').attr('aria-expanded', false);
                    var accordionError = $('.has-error:first').closest('.panel-collapse').prev('.panel-heading').find('a[data-toggle="collapse"]');
                    $(accordionError).trigger('click');
                }

                if($('button[name="back-btn"]')[0]) {
                    $('button[name="back-btn"]').removeAttr('disabled').removeClass('disabled');
                }

                // console.log('jQuery Validation Error');
            },
            onSuccess: function(e) {

                // console.log($(e.target).data('formValidation'));
            }
        });
    } else {
        $("%selector%").formValidation({

            // Real time validation - Bootstrap Form
            framework: 'bootstrap',
            excluded: ['.hidden-wrapper:not(.on) *'],
            onPreValidate: function(e) {

               // console.log('PreValidate');
            },
            onError: function(e) {

                // if accordion, collapse in first one with error
                if($('.panel-collapse')[0] && $('.form-group.has-error')[0]) {
                $('.panel-collapse').removeClass('in').attr('aria-expanded', false);
                    var accordionError = $('.has-error:first-of-type').closest('.panel-collapse').prev('.panel-heading').find('a[data-toggle="collapse"]');
                    $(accordionError).trigger('click');
                }

                if($('button[name="back-btn"]')[0]) {
                    $('button[name="back-btn"]').removeAttr('disabled').removeClass('disabled');
                }

                // console.log('jQuery Validation Error');
            },
            onSuccess: function(e) {

                // console.log($(e.target).data('formValidation'));
            }
        });
    }

    // DEBUG
    /* $("%selector%").find('input, select').on('change ifChanged changed.bs.select', function(e) {
        console.log($("%selector%").data('formValidation').getInvalidFields());
    }); */

    // pickadate values
    if($('.picker')[0]) {
        $('.picker').each(function() {
            var fieldName = $(this).attr('id').replace('_root', ''),
                validatorOptions = $("%selector%").data('formValidation').getOptions(fieldName);
            if(validatorOptions !== null) {
                $.each( validatorOptions.validators, function( key, value ) {
                    var currentValidator = key;
                    $("%selector%").data('formValidation').updateOption(fieldName, currentValidator, 'transformer', function($field, validatorName, validator) {
                        return $('[name="' + fieldName + '_submit"]').val();
                    });
                });
            }
            $('#' + fieldName).on('change', function() {
                $("%selector%").data('formValidation').revalidateField(fieldName);
            });
        });
    }

    // disable dependent fields validation when they're hidden
    if($('%selector% .hidden-wrapper')[0]) {
        var arr = [];
        $('%selector% .hidden-wrapper').each(function() {
            var parentField = $(this).data('parent'),
                that        = this;
            $('%selector% [name="' + parentField + '"]').on('change ifChanged changed.bs.select', function(e) {

                // switch off hidden wrapper if it has parents off
                if($(that).parents('.hidden-wrapper.off').length > 0) {
                    $(that).removeClass('on').addClass('off');
                }
                var trueFalse = $(that).hasClass('on');
                $(that).children().find('input, textarea, select').each(function() {

                    // Enable|Disable validator only if field is registered inside
                    var name = $(this).attr('name');
                    if(typeof($("%selector%").data('formValidation').options.fields[name]) != 'undefined') {
                        // Enable|Disable validator depending on dependent fields wrapper state
                        $("%selector%").formValidation('enableFieldValidators', $(this).attr('name'), trueFalse);

                        // console.log($(this).attr('name') + ' enableFieldValidators => ' + trueFalse);

                        // reset dependent fields state
                        $("%selector%").data('formValidation').updateStatus($(this).attr('name'), 'NOT_VALIDATED');

                        // re-enable submit button
                        $("%selector%").data('formValidation').disableSubmitButtons(false);

                        // console.log($(this).attr('name') + ' => NOT_VALIDATED');
                    }
                });
            });

            // trigger on load
            $('%selector% [name="' + parentField + '"]').each(function() {
                if($.inArray(parentField, arr) === -1) {
                    if($(this).next('.iCheck-helper').length > 0 && $(this).is(':checked')) {
                        // if ICheck
                        $(this).trigger('ifChanged');
                        arr.push(parentField);
                    } else if($(this).parent('.bootstrap-select').length > 0 && $(this).val() !== '') {
                        // if bootstrap-select
                        $(this).trigger('changed.bs.select');
                        arr.push(parentField);
                    } else {
                        if($(this).is(':checked') || ($(this).val() !== '' && !$(this).is(':checkbox') && !$(this).is(':radio'))) {
                            $(this).trigger('change');
                            arr.push(parentField);
                        }
                    }
                }
            });
        });
    }

    // transmit iCheck events to Validator once dependent field events have finished
    if($('%selector% .iCheck-helper')[0]) {
        $('%selector% input[type="radio"], %selector% input[type="checkbox"]').on('ifChanged', function(e) {
            $("%selector%").data('formValidation').revalidateField($(e.target).attr('name'));
        });
    }

    // back buttons
    if($('button[name="back-btn"]')[0]) {
        $('button[name="back-btn"]').on('click', function() {
            var fields = $("%selector%").data('formValidation').options.fields;
            for (var field in fields) {
                $("%selector%").data('formValidation').enableFieldValidators(field, false);
            }
        });
    }]]>
        </js_code>
    </default>
    <bs4>
        <includes>
            <!--
                Path to css and js files into plugins folder.
                If your files are not in plugins folder, use absolute paths.
            -->
            <css>
                <file>formvalidation/dist/css/formValidation.min.css</file>
            </css>
            <js>
                <file>formvalidation/dist/js/formValidation.min.js</file>
                <file>formvalidation/dist/js/framework/bootstrap4.min.js</file>
            </js>
        </includes>
        <js_code>
<![CDATA[

    $("%selector%").formValidation({

        // Real time validation - Bootstrap 4 Form
        framework: 'bootstrap4',
        err: {
            clazz: 'invalid-feedback',
            container: function($field, validator) {
                var fieldName = $field.attr('name').replace('[]', '');
                if(!$('#err-' + fieldName)[0]) {
                    $errDiv = $('<div id="err-' + fieldName + '"></div>');
                    var $formGroup = $field.closest('.form-group'),
                        $col       = $formGroup.find('div[class*="col-"]');

                    if($col[0]) {
                        // if horizontal form
                        $field.closest('div[class*="col-"]').append($errDiv);
                    } else {
                        $formGroup.append($errDiv);
                    }
                }

                // formValidation shouldn't add the invalid class in the error container!
                $('#err-' + fieldName).removeClass('invalid-feedback')
                return '#err-' + fieldName;
            }
        },
        row: {
            selector: null,
            valid: '',
            invalid: ''
        },
        excluded: ['.hidden-wrapper:not(.on) *'],
        onPreValidate: function(e) {
            $(e.target).closest('form').addClass('was-validated');
        },
        onError: function(e) {

            // if accordion, collapse in first one with error
            if($('.panel-collapse')[0] && $('.form-group.has-error')[0]) {
            $('.panel-collapse').removeClass('in').attr('aria-expanded', false);
                var accordionError = $('.has-error:first-of-type').closest('.panel-collapse').prev('.panel-heading').find('a[data-toggle="collapse"]');
                $(accordionError).trigger('click');
            }

            if($('button[name="back-btn"]')[0]) {
                $('button[name="back-btn"]').removeAttr('disabled').removeClass('disabled');
            }

            // console.log('jQuery Validation Error');
        },
        onSuccess: function(e) {

            // console.log($(e.target).data('formValidation'));
        }
    }).on('err.validator.fv', function(e, data) {
        data.element.addClass('is-invalid');
    }).on('success.validator.fv', function(e, data) {
            if(!$(e.target).siblings('[data-fv-result="INVALID"]')[0]) {
                data.element.removeClass('is-invalid');
            }
        });

    // DEBUG
    /* $("%selector%").find('input, select').on('change ifChanged changed.bs.select', function(e) {
        console.log($("%selector%").data('formValidation').getInvalidFields());
    }); */

    // pickadate values
    if($('.picker')[0]) {
        $('.picker').each(function() {
            var fieldName = $(this).attr('id').replace('_root', ''),
                validatorOptions = $("%selector%").data('formValidation').getOptions(fieldName);
            if(validatorOptions !== null) {
                $.each( validatorOptions.validators, function( key, value ) {
                    var currentValidator = key;
                    $("%selector%").data('formValidation').updateOption(fieldName, currentValidator, 'transformer', function($field, validatorName, validator) {
                        return $('[name="' + fieldName + '_submit"]').val();
                    });
                });
            }
            $('#' + fieldName).on('change', function() {
                $("%selector%").data('formValidation').revalidateField(fieldName);
            });
        });
    }

    // disable dependent fields validation when they're hidden
    if($('%selector% .hidden-wrapper')[0]) {
        var arr = [];
        $('%selector% .hidden-wrapper').each(function() {
            var parentField = $(this).data('parent'),
                that        = this;
            $('%selector% [name="' + parentField + '"]').on('change ifChanged changed.bs.select', function(e) {

                // switch off hidden wrapper if it has parents off
                if($(that).parents('.hidden-wrapper.off').length > 0) {
                    $(that).removeClass('on').addClass('off');
                }
                var trueFalse = $(that).hasClass('on');
                $(that).children().find('input, textarea, select').each(function() {

                    // Enable|Disable validator only if field is registered inside
                    var name = $(this).attr('name');
                    if(typeof($("%selector%").data('formValidation').options.fields[name]) != 'undefined') {
                        // Enable|Disable validator depending on dependent fields wrapper state
                        $("%selector%").formValidation('enableFieldValidators', $(this).attr('name'), trueFalse);

                        // console.log($(this).attr('name') + ' enableFieldValidators => ' + trueFalse);

                        // reset dependent fields state
                        $("%selector%").data('formValidation').updateStatus($(this).attr('name'), 'NOT_VALIDATED');

                        // re-enable submit button
                        $("%selector%").data('formValidation').disableSubmitButtons(false);

                        // console.log($(this).attr('name') + ' => NOT_VALIDATED');
                    }
                });
            });

            // trigger on load
            $('%selector% [name="' + parentField + '"]').each(function() {
                if($.inArray(parentField, arr) === -1) {
                    if($(this).next('.iCheck-helper').length > 0 && $(this).is(':checked')) {
                        // if ICheck
                        $(this).trigger('ifChanged');
                        arr.push(parentField);
                    } else if($(this).parent('.bootstrap-select').length > 0 && $(this).val() !== '') {
                        // if bootstrap-select
                        $(this).trigger('changed.bs.select');
                        arr.push(parentField);
                    } else {
                        if($(this).is(':checked') || ($(this).val() !== '' && !$(this).is(':checkbox') && !$(this).is(':radio'))) {
                            $(this).trigger('change');
                            arr.push(parentField);
                        }
                    }
                }
            });
        });
    }

    // transmit iCheck events to Validator once dependent field events have finished
    if($('%selector% .iCheck-helper')[0]) {
        $('%selector% input[type="radio"], %selector% input[type="checkbox"]').on('ifChanged', function(e) {
            $("%selector%").data('formValidation').revalidateField($(e.target).attr('name'));
        });
    }

    // back buttons
    if($('button[name="back-btn"]')[0]) {
        $('button[name="back-btn"]').on('click', function() {
            var fields = $("%selector%").data('formValidation').options.fields;
            for (var field in fields) {
                $("%selector%").data('formValidation').enableFieldValidators(field, false);
            }
        });
    }]]>
        </js_code>
    </bs4>
    <foundation>
        <includes>
            <!--
                Path to css and js files into plugins folder.
                If your files are not in plugins folder, use absolute paths.
            -->
            <css>
                <file>formvalidation/dist/css/formValidation.min.css</file>
            </css>
            <js>
                <file>formvalidation/dist/js/formValidation.min.js</file>
                <file>formvalidation/dist/js/framework/foundation.min.js</file>
            </js>
        </includes>
        <js_code>
<![CDATA[

    $("%selector%").formValidation({

        // Real time validation - Foundation Form
        framework: 'foundation',
        //err: {
        //    clazz: 'form-error',
        //    container: label
        //},
        excluded: ['.hidden-wrapper:not(.on) *'],
        onPreValidate: function(e) {

           // console.log('PreValidate');
        },
        onError: function(e) {

            if($('button[name="back-btn"]')[0]) {
                $('button[name="back-btn"]').removeAttr('disabled').removeClass('disabled');
            }

            // console.log('jQuery Validation Error');
        },
        onSuccess: function(e) {

            // console.log($(e.target).data('formValidation'));
        }
    });

    // DEBUG
    /* $("%selector%").find('input, select').on('change ifChanged changed.bs.select', function(e) {
        console.log($("%selector%").data('formValidation').getInvalidFields());
    }); */

    // pickadate values
    if($('.picker')[0]) {
        $('.picker').each(function() {
            var fieldName = $(this).attr('id').replace('_root', ''),
                validatorOptions = $("%selector%").data('formValidation').getOptions(fieldName);
            if(validatorOptions !== null) {
                $.each( validatorOptions.validators, function( key, value ) {
                    var currentValidator = key;
                    $("%selector%").data('formValidation').updateOption(fieldName, currentValidator, 'transformer', function($field, validatorName, validator) {
                        return $('[name="' + fieldName + '_submit"]').val();
                    });
                });
            }
            $('#' + fieldName).on('change', function() {
                $("%selector%").data('formValidation').revalidateField(fieldName);
            });
        });
    }

    // disable dependent fields validation when they're hidden
    if($('%selector% .hidden-wrapper')[0]) {
        var arr = [];
        $('%selector% .hidden-wrapper').each(function() {
            var parentField = $(this).data('parent'),
                that        = this;
            $('%selector% [name="' + parentField + '"]').on('change ifChanged changed.bs.select', function(e) {

                // switch off hidden wrapper if it has parents off
                if($(that).parents('.hidden-wrapper.off').length > 0) {
                    $(that).removeClass('on').addClass('off');
                }
                var trueFalse = $(that).hasClass('on');
                $(that).children().find('input, textarea, select').each(function() {

                    // Enable|Disable validator only if field is registered inside
                    var name = $(this).attr('name');
                    if(typeof($("%selector%").data('formValidation').options.fields[name]) != 'undefined') {
                        // Enable|Disable validator depending on dependent fields wrapper state
                        $("%selector%").formValidation('enableFieldValidators', $(this).attr('name'), trueFalse);

                        // console.log($(this).attr('name') + ' enableFieldValidators => ' + trueFalse);

                        // reset dependent fields state
                        $("%selector%").data('formValidation').updateStatus($(this).attr('name'), 'NOT_VALIDATED');

                        // re-enable submit button
                        $("%selector%").data('formValidation').disableSubmitButtons(false);

                        // console.log($(this).attr('name') + ' => NOT_VALIDATED');
                    }
                });
            });

            // trigger on load
            $('%selector% [name="' + parentField + '"]').each(function() {
                if($.inArray(parentField, arr) === -1) {
                    if($(this).next('.iCheck-helper').length > 0 && $(this).is(':checked')) {
                        // if ICheck
                        $(this).trigger('ifChanged');
                        arr.push(parentField);
                    } else if($(this).parent('.bootstrap-select').length > 0 && $(this).val() !== '') {
                        // if bootstrap-select
                        $(this).trigger('changed.bs.select');
                        arr.push(parentField);
                    } else {
                        if($(this).is(':checked') || ($(this).val() !== '' && !$(this).is(':checkbox') && !$(this).is(':radio'))) {
                            $(this).trigger('change');
                            arr.push(parentField);
                        }
                    }
                }
            });
        });
    }

    // transmit iCheck events to Validator once dependent field events have finished
    if($('%selector% .iCheck-helper')[0]) {
        $('%selector% input[type="radio"], %selector% input[type="checkbox"]').on('ifChanged', function(e) {
            $("%selector%").data('formValidation').revalidateField($(e.target).attr('name'));
        });
    }

    // back buttons
    if($('button[name="back-btn"]')[0]) {
        $('button[name="back-btn"]').on('click', function() {
            var fields = $("%selector%").data('formValidation').options.fields;
            for (var field in fields) {
                $("%selector%").data('formValidation').enableFieldValidators(field, false);
            }
        });
    }]]>
        </js_code>
    </foundation>
    <french>
        <includes>
            <!--
                Path to css and js files into plugins folder.
                If your files are not in plugins folder, use absolute paths.
            -->
            <css>
                <file>formvalidation/dist/css/formValidation.min.css</file>
            </css>
            <js>
                <file>formvalidation/dist/js/formValidation.min.js</file>
                <file>formvalidation/dist/js/framework/bootstrap.min.js</file>
                <file>formvalidation/i18n/dist/i18n.min.js</file>
                <file>formvalidation/dist/js/language/fr_FR.js</file>
            </js>
        </includes>
        <js_code>
<![CDATA[   if($("%selector%").hasClass('material-form')) {
        // Real time validation - Material Form
        $("%selector%").formValidation({
            framework: 'bootstrap',
            row: {
                selector: '.input-field',
                valid: 'has-success',
                invalid: 'has-error'
            },
            excluded: ['.hidden-wrapper:not(.on)'],
            onPreValidate: function(e) {

               // console.log('PreValidate');
            },
            onError: function(e) {

                // if accordion, collapse in first one with error
                if($('.panel-collapse')[0] && $('.has-error')[0]) {
                    $('.panel-collapse').removeClass('in').attr('aria-expanded', false);
                    var accordionError = $('.has-error:first').closest('.panel-collapse').prev('.panel-heading').find('a[data-toggle="collapse"]');
                    $(accordionError).trigger('click');
                }

                if($('button[name="back-btn"]')[0]) {
                    $('button[name="back-btn"]').removeAttr('disabled').removeClass('disabled');
                }

                // console.log('jQuery Validation Error');
            },
            onSuccess: function(e) {

                // console.log($(e.target).data('formValidation'));
            },
            addOns: {
                i18n: {}
            },
            locale: 'fr_FR'
        });
    } else {
        $("%selector%").formValidation({

            // Real time validation - Bootstrap Form
            framework: 'bootstrap',
            excluded: ['.hidden-wrapper:not(.on)'],
            onPreValidate: function(e) {

               // console.log('PreValidate');
            },
            onError: function(e) {

                // if accordion, collapse in first one with error
                if($('.panel-collapse')[0] && $('.form-group.has-error')[0]) {
                    $('.panel-collapse').removeClass('in').attr('aria-expanded', false);
                    var accordionError = $('.has-error:first').closest('.panel-collapse').prev('.panel-heading').find('a[data-toggle="collapse"]');
                    $(accordionError).trigger('click');
                }

                if($('button[name="back-btn"]')[0]) {
                    $('button[name="back-btn"]').removeAttr('disabled').removeClass('disabled');
                }

                // console.log('jQuery Validation Error');
            },
            onSuccess: function(e) {

                // console.log($(e.target).data('formValidation'));
            },
            addOns: {
                i18n: {}
            },
            locale: 'fr_FR'
        });
    }

    if($('%selector% .hidden-wrapper')[0]) {
        var arr = [];
        $('%selector% .hidden-wrapper').each(function() {
            var parentField = $(this).data('parent'),
                that        = this;
            $('%selector% [name="' + parentField + '"]').on('change ifChanged changed.bs.select', function(e) {

                // switch off hidden wrapper if it has parents off
                if($(that).parents('.hidden-wrapper.off').length > 0) {
                    $(that).removeClass('on').addClass('off');
                }
                var trueFalse = $(that).hasClass('on');
                $(that).children().find('input, textarea, select').each(function() {

                    // Enable|Disable validator only if field is registered inside
                    var name = $(this).attr('name');
                    if(typeof($("%selector%").data('formValidation').options.fields[name]) != 'undefined') {
                        // Enable|Disable validator depending on dependent fields wrapper state
                        $("%selector%").formValidation('enableFieldValidators', $(this).attr('name'), trueFalse);

                        // console.log($(this).attr('name') + ' enableFieldValidators => ' + trueFalse);

                        // reset dependent fields state
                        $("%selector%").data('formValidation').updateStatus($(this).attr('name'), 'NOT_VALIDATED');

                        // re-enable submit button
                        $("%selector%").data('formValidation').disableSubmitButtons(false);

                        // console.log($(this).attr('name') + ' => NOT_VALIDATED');
                    }
                });
            });

            // trigger on load
            $('%selector% [name="' + parentField + '"]').each(function() {
                if($.inArray(parentField, arr) === -1) {
                    if($(this).next('.iCheck-helper').length > 0 && $(this).is(':checked')) {
                        // if ICheck
                        $(this).trigger('ifChanged');
                        arr.push(parentField);
                    } else if($(this).parent('.bootstrap-select').length > 0 && $(this).val() !== '') {
                        // if bootstrap-select
                        $(this).trigger('changed.bs.select');
                        arr.push(parentField);
                    } else {
                        if($(this).is(':checked') || ($(this).val() !== '' && !$(this).is(':checkbox') && !$(this).is(':radio'))) {
                            $(this).trigger('change');
                            arr.push(parentField);
                        }
                    }
                }
            });
        });
    }

    // transmit iCheck events to Validator once dependent field events have finished
    if($('%selector% .iCheck-helper')[0]) {
        $('%selector% input[type="radio"], %selector% input[type="checkbox"]').on('ifChanged', function(e) {
            $("%selector%").data('formValidation').revalidateField($(e.target).attr('name'));
        });
    }

    // back buttons
    if($('button[name="back-btn"]')[0]) {
        $('button[name="back-btn"]').on('click', function() {
            var fields = $("%selector%").data('formValidation').options.fields;
            for (var field in fields) {
                $("%selector%").data('formValidation').enableFieldValidators(field, false);
            }
        });
    }]]>
        </js_code>
    </french>
    <bs4-french>
        <includes>
            <!--
                Path to css and js files into plugins folder.
                If your files are not in plugins folder, use absolute paths.
            -->
            <css>
                <file>formvalidation/dist/css/formValidation.min.css</file>
            </css>
            <js>
                <file>formvalidation/dist/js/formValidation.min.js</file>
                <file>formvalidation/dist/js/framework/bootstrap4.min.js</file>
                <file>formvalidation/i18n/dist/i18n.min.js</file>
                <file>formvalidation/dist/js/language/fr_FR.js</file>
            </js>
        </includes>
        <js_code>
<![CDATA[

    $("%selector%").formValidation({

        // Real time validation - Bootstrap 4 Form
        framework: 'bootstrap4',
        err: {
            clazz: 'invalid-feedback',
            container: function($field, validator) {
                var fieldName = $field.attr('name').replace('[]', '');
                if(!$('#err-' + fieldName)[0]) {
                    $errDiv = $('<div id="err-' + fieldName + '"></div>');
                    var $formGroup = $field.closest('.form-group'),
                        $col       = $formGroup.find('div[class*="col-"]');

                    if($col[0]) {
                        // if horizontal form
                        $field.closest('div[class*="col-"]').append($errDiv);
                    } else {
                        $formGroup.append($errDiv);
                    }
                }

                // formValidation shouldn't add the invalid class in the error container!
                $('#err-' + fieldName).removeClass('invalid-feedback')
                return '#err-' + fieldName;
            }
        },
        row: {
            selector: null,
            valid: '',
            invalid: ''
        },
        excluded: ['.hidden-wrapper:not(.on) *'],
        onPreValidate: function(e) {
            $(e.target).closest('form').addClass('was-validated');
        },
        onError: function(e) {

            // if accordion, collapse in first one with error
            if($('.panel-collapse')[0] && $('.form-group.has-error')[0]) {
            $('.panel-collapse').removeClass('in').attr('aria-expanded', false);
                var accordionError = $('.has-error:first-of-type').closest('.panel-collapse').prev('.panel-heading').find('a[data-toggle="collapse"]');
                $(accordionError).trigger('click');
            }

            if($('button[name="back-btn"]')[0]) {
                $('button[name="back-btn"]').removeAttr('disabled').removeClass('disabled');
            }

            // console.log('jQuery Validation Error');
        },
        onSuccess: function(e) {

            // console.log($(e.target).data('formValidation'));
        },
            addOns: {
                i18n: {}
            },
            locale: 'fr_FR'
    }).on('err.validator.fv', function(e, data) {
        data.element.addClass('is-invalid');
    }).on('success.validator.fv', function(e, data) {
            if(!$(e.target).siblings('[data-fv-result="INVALID"]')[0]) {
                data.element.removeClass('is-invalid');
            }
        });

    // DEBUG
    /* $("%selector%").find('input, select').on('change ifChanged changed.bs.select', function(e) {
        console.log($("%selector%").data('formValidation').getInvalidFields());
    }); */

    // pickadate values
    if($('.picker')[0]) {
        $('.picker').each(function() {
            var fieldName = $(this).attr('id').replace('_root', ''),
                validatorOptions = $("%selector%").data('formValidation').getOptions(fieldName);
            if(validatorOptions !== null) {
                $.each( validatorOptions.validators, function( key, value ) {
                    var currentValidator = key;
                    $("%selector%").data('formValidation').updateOption(fieldName, currentValidator, 'transformer', function($field, validatorName, validator) {
                        return $('[name="' + fieldName + '_submit"]').val();
                    });
                });
            }
            $('#' + fieldName).on('change', function() {
                $("%selector%").data('formValidation').revalidateField(fieldName);
            });
        });
    }

    // disable dependent fields validation when they're hidden
    if($('%selector% .hidden-wrapper')[0]) {
        var arr = [];
        $('%selector% .hidden-wrapper').each(function() {
            var parentField = $(this).data('parent'),
                that        = this;
            $('%selector% [name="' + parentField + '"]').on('change ifChanged changed.bs.select', function(e) {

                // switch off hidden wrapper if it has parents off
                if($(that).parents('.hidden-wrapper.off').length > 0) {
                    $(that).removeClass('on').addClass('off');
                }
                var trueFalse = $(that).hasClass('on');
                $(that).children().find('input, textarea, select').each(function() {

                    // Enable|Disable validator only if field is registered inside
                    var name = $(this).attr('name');
                    if(typeof($("%selector%").data('formValidation').options.fields[name]) != 'undefined') {
                        // Enable|Disable validator depending on dependent fields wrapper state
                        $("%selector%").formValidation('enableFieldValidators', $(this).attr('name'), trueFalse);

                        // console.log($(this).attr('name') + ' enableFieldValidators => ' + trueFalse);

                        // reset dependent fields state
                        $("%selector%").data('formValidation').updateStatus($(this).attr('name'), 'NOT_VALIDATED');

                        // re-enable submit button
                        $("%selector%").data('formValidation').disableSubmitButtons(false);

                        // console.log($(this).attr('name') + ' => NOT_VALIDATED');
                    }
                });
            });

            // trigger on load
            $('%selector% [name="' + parentField + '"]').each(function() {
                if($.inArray(parentField, arr) === -1) {
                    if($(this).next('.iCheck-helper').length > 0 && $(this).is(':checked')) {
                        // if ICheck
                        $(this).trigger('ifChanged');
                        arr.push(parentField);
                    } else if($(this).parent('.bootstrap-select').length > 0 && $(this).val() !== '') {
                        // if bootstrap-select
                        $(this).trigger('changed.bs.select');
                        arr.push(parentField);
                    } else {
                        if($(this).is(':checked') || ($(this).val() !== '' && !$(this).is(':checkbox') && !$(this).is(':radio'))) {
                            $(this).trigger('change');
                            arr.push(parentField);
                        }
                    }
                }
            });
        });
    }

    // transmit iCheck events to Validator once dependent field events have finished
    if($('%selector% .iCheck-helper')[0]) {
        $('%selector% input[type="radio"], %selector% input[type="checkbox"]').on('ifChanged', function(e) {
            $("%selector%").data('formValidation').revalidateField($(e.target).attr('name'));
        });
    }

    // back buttons
    if($('button[name="back-btn"]')[0]) {
        $('button[name="back-btn"]').on('click', function() {
            var fields = $("%selector%").data('formValidation').options.fields;
            for (var field in fields) {
                $("%selector%").data('formValidation').enableFieldValidators(field, false);
            }
        });
    }]]>
        </js_code>
    </bs4-french>
</root>
